// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeliveryMethods.DeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("delivery_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_delivery_methods");

                    b.ToTable("DeliveryMethods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("511a434a-52d2-4a28-b5d4-d1be04fdc3f5"),
                            DeliveryTime = "7-10 days",
                            Description = "Free Delivery Description",
                            Name = "Free Delivery",
                            Price = 0m
                        },
                        new
                        {
                            Id = new Guid("801f64d0-831b-4b60-b562-f89bc52f936e"),
                            DeliveryTime = "1-3 days",
                            Description = "Fast Delivery Description",
                            Name = "Fast Delivery",
                            Price = 5m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_intent_id");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("subtotal");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("OutboxMessageConsumers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customers.Customer", b =>
                {
                    b.OwnsOne("Domain.Entities.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.Property<string>("Zipcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_zipcode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.OwnsOne("Domain.Entities.Orders.ValueObjects.OrderDeliveryMethod", "DeliveryMethod", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("delivery_method_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("delivery_method_name");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("delivery_method_price");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsOne("Domain.Entities.OrderAggregate.Entities.OrderCustomer", "Customer", b1 =>
                        {
                            b1.Property<Guid>("order_id")
                                .HasColumnType("uuid")
                                .HasColumnName("order_id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("first_name");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("order_customer_id");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("last_name");

                            b1.HasKey("order_id")
                                .HasName("pk_order_customer");

                            b1.ToTable("order_customer", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("order_id")
                                .HasConstraintName("fk_order_customer_orders_id");

                            b1.OwnsOne("Domain.Entities.Common.ValueObjects.Address", "DeliveryAddress", b2 =>
                                {
                                    b2.Property<Guid>("OrderCustomerorder_id")
                                        .HasColumnType("uuid")
                                        .HasColumnName("order_id");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("delivery_address_city");

                                    b2.Property<string>("State")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("delivery_address_state");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("delivery_address_street");

                                    b2.Property<string>("Zipcode")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("delivery_address_zipcode");

                                    b2.HasKey("OrderCustomerorder_id");

                                    b2.ToTable("order_customer");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderCustomerorder_id")
                                        .HasConstraintName("fk_order_customer_order_customer_order_id");
                                });

                            b1.Navigation("DeliveryAddress")
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.Entities.OrderAggregate.Entities.OrderItem", "Items", b1 =>
                        {
                            b1.Property<Guid>("order_id")
                                .HasColumnType("uuid")
                                .HasColumnName("order_id");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("order_item_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");

                            b1.Property<string>("PhotoUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("photo_url");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("price");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.HasKey("order_id", "Id")
                                .HasName("pk_order_items");

                            b1.ToTable("order_items", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("order_id")
                                .HasConstraintName("fk_order_items_orders_order_id");
                        });

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("DeliveryMethod")
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Products.Product", b =>
                {
                    b.OwnsOne("Domain.Common.ValueObjects.Photo", "Photo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("default-photo.jpg")
                                .HasColumnName("photo_name");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("https://webshop-learn-dot-net.s3.eu-central-1.amazonaws.com/default-photo.jpg")
                                .HasColumnName("photo_url");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Photo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
